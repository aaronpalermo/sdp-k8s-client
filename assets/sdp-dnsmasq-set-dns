#!/usr/bin/env sh

[ "${FLOCKER}" != "$0" ] && exec env FLOCKER="$0" flock -x "$0" "$0" "$@" || :

# This script is executed by socat.
# It will get events from sdp-driver about DNS changes and it will
# configure dnsmasq to use the new settings requested by sdp-driver

function decho () {
    echo $(date +"%b %d %X") $@
}

# NOTE: stdin reads from the socat socket.
DNSMASQ_APPGATE=/etc/dnsmasq.d/appgate.conf
USE_SERVER_ENTRIES=0

# This reuses later the first entry in the file since that entry
# points to the kube_dns service
KUBE_DNS=$(cat $DNSMASQ_APPGATE|head -1)

# What does the AWKward AWK script?
#
# It matches 2 types of entries:
#   1. entries with `dns.server`:
#     1.1. if it contains `.default$` then it's a plain DNS server entry
#     1.2. else it's a match domain entry + DNS server entry
#   2. other entries (we assume it's a normal server entry)
#
# The script collects plain DNS servers and match domain DNS servers.

# NOT: plain DNS entries are ignored. Only match domains are supported.
match_domains () {
    servers="$1"
    domains="$2"
    echo -n "$domains" | awk -vSERVERS="$servers" \
                             -vSERVER_ENTRIES="$SERVER_ENTRIES" \
                             -e '
BEGIN {
  RS = ","
  lend = 0
  lens = split(SERVERS, servers, ",")
}
{
  if (match($0, "dns.server")) {
    # sdp-driver sent an entry with the form: dns.server.X.Y.Z.W.domain
    #    where X.Y.Z.W is the DNS to use to resolve hosts in domain
    if (match($0, ".default$")) {
        servers[++lens] = gensub(/dns.server\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).(.+)/, "\\1", "g")
    } else {
        domains[lend++] = gensub(/dns.server\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).(.+)/, "server=/\\2/\\1", "g")
        dns = gensub(/dns.server\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).(.+)/, "\\1", "g")
        servers_for_domains[dns] = 1
    }
  } else if (length() > 0) {
    # sdp-driver sent a plain domain so all the known servers should search hosts there
    for (s in servers) {
      domains[lend++] = "server=/" $1 "/" servers[s]
    }
  }
}
END {
  if (SERVER_ENTRIES) {
    for (s in servers) {
      if (! servers_for_domains[servers[s]]) {
        print("server=" servers[s])
      }
    }
  }
  for (d in domains) {
    print(domains[d])
  }
}'
}

read cli
decho "Got new DNS configuration from sdp-driver: $cli"
opt=${cli%% *}
reset=0
while [ ! -z $opt ]; do
    case ${opt%%=*} in
        --reset)
            reset=1
            rm -rf $DNSMASQ_APPGATE
            break
            ;;
        --servers)
            servers="${opt##*=}"
            ;;
        --domains)
            domains="${opt##*=}"
            ;;
        *)
            # ignore this
            ;;
    esac
    cli=${cli#* }
    opt=${cli%% *}
    if [ "$opt" = "$cli" ]; then
        cli=""
    fi
done

if [[ -z "$servers" && -z $domains ]]; then
    if [[ $reset == 0 ]]; then
        decho "--servers not provided, doing nothing"
        exit 0
    fi
fi

decho "Setting new DNS configuration"
echo $KUBE_DNS > $DNSMASQ_APPGATE
for i in $(match_domains "$servers" "$domains"); do
   echo $i >> $DNSMASQ_APPGATE
done

decho "Applying new DNS configuration"
# dnsmasq can not reload files on SIHGUP so we need to restart it
pid=$(pgrep dnsmasq)
if [[ ! -z $pid ]]; then
    kill -9 $pid
fi
res=1
while [[ $res != 0 ]]; do
    decho "Restarting dnsmasq ..."
    /usr/sbin/dnsmasq --pid-file=/sdp-dnsmasq/dnsmasq.pid --port=53 --local-service \
                      --listen-address=127.0.0.1 --log-queries -8 /proc/1/fd/1
    res=$?
    if [[ $res != 0 ]]; then
        # Wait a bit so we dont try like crazy to restart it
        decho "Trying to restart dnsmasq again ...."
        sleep 5
    fi
done
